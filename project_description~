PROJECT DESCRIPTION:

It's easy! List books you'd like to swap with other club members.
Once a book is requested, mail it to the club member.
In return you may choose from #####available books!

USER STORIES:
User Story:
          As an authenticated user, I can view all books posted by every user.
User Story:
          As an authenticated user, I can add a new book.
User Story:
          As an authenticated user, I can update my settings to store my full name, city, and state.
Bonus User Story:
          As an authenticated user, I can propose a trade and wait for the other user to accept the trade.

PLAN:
--- base the whole thing in elearn project
--- levels: many-to-many books view, many-to-1 books to personal user

mongoDB SCHEMAS:
Development:
db = bookclub
collections = {users, books}
users schema = {name, username, email, password, books (several) {book_ids}}
books schema = {owner_id, authors (several), title, edition, description??, remarks, tags, status => only one thing... {lent_to/borrowed_from, user_id??, date}}

STRUCTURE:
'/': login/registration page
'/register/signup': signing up page
'/home': a general view of the project??
'/books': a list of all books (find ways to sort/filter the info?)
'/books/book': information about a particular book for handling
'/books/book/message': a message page to ask for a book
'/user/profile': check for profile data and for changes
'/user/books': all information about my books, either lent or borrowed
'/user/books/new': a book to register

OBSERVATIONS:
--- node helps to debug a bit...
--- after a plan it is better! then: structure --> model --> route or view --> view or route --> app --> structure


Some links to check:
Registration:
http://miamicoder.com/2014/using-mongodb-and-mongoose-for-user-registration-login-and-logout-in-a-mobile-application/

//https://engineering.gosquared.com/node-js-error-handling-callbacks-vs-promises
//http://webapplog.com/intro-to-express-js-parameters-error-handling-and-other-middleware/
//https://www.joyent.com/developers/node/design/errors
//http://stackoverflow.com/questions/13401354/need-better-node-js-http-get-request-error-handling
//http://timstermatic.github.io/blog/2013/08/17/a-simple-mvc-framework-with-node-and-express/
//http://code.tutsplus.com/tutorials/build-a-complete-mvc-website-with-expressjs--net-34168


